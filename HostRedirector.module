<?php

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                     *
 *                                                     *
 * The one and only amazing Host Redirector [CBAP]!  *
 *                                                     *
 *                                                     *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
class HostRedirector extends WireData implements Module, ConfigurableModule {
  /*
   *
   *
   * Module info
   *
   *
   */
	public static function getModuleInfo() {
		return [
			'title'   => 'Host Redirector',
      'author'  => 'Avoine Oy',
			'version' => '1.1.1',
			'summary' => 'A host based redirect router.',
			'singular' => true,
			'autoload' => true,
    ];
	}

  /*
   *
   *
   * Hooks
   *
   *
   */
	public function init() {
    // Redirecting will be done here
    $this->addHookBefore('ProcessPageView::execute', $this, 'router');
    // Auto update cache on module config save will be done here
    $this->addHookAfter('Modules::saveModuleConfigData', $this, 'updateRoutes');
	}
  
  /*
   *
   *
   * Main routing logic (hook)
   *
   *
   */
  public function router(HookEvent $event) {
    // Read routes from cache while automatically caching when it's expired
    $routes = $this->routesArray;

    // Fast exist for misconfigured module
    if(!is_array($routes) or count($routes) === 0) {
      return;
    }
    
    // Use strtolower to avoid case problems
    $host = strtolower($this->config->httpHost);
    
    // Quick exist if the request is made against the main host
    if($routes[0] === $host) {
      return;
    }

    // Match HTTP host
    if(isset($routes[$host])) {
      list($url, $append) = $routes[$host];
      if($append) {
        // Append the path to the target_path (while removing leading forward slash
        // since it's always added by the "parser")
        $url.= ltrim($_SERVER['REQUEST_URI'], '/');
      }
      $this->session->redirect($url);  
    }
  }

  /*
   *
   *
   * Hook method which updates the routes array to the module's config
   *
   *
   */
  public function updateRoutes(HookEvent $event) {
    $currentConfig = $event->arguments(1);
    
    // Append the parsed array to the module's config
    $newConfig = array_merge($currentConfig, [
      'routesArray' => $this->getParsedRoutes($currentConfig['routes']),
    ]);
    
    // Call PW's method directly to avoid executing hooks again
    $this->modules->___saveModuleConfigData(__CLASS__, $newConfig);
  }
  
  /*
   *
   *
   * Helper for parsing the configuration string into routes array
   *
   *
   */
  public function getParsedRoutes($routesString) {
    $httpHosts = $this->config->httpHosts;
    if(!is_array($httpHosts) or count($httpHosts) === 0) {
      // httpHosts hasn't been configured, exit early
      return [];
    }
    
    // The first item in httpHosts will be automatically used as the main host (i.e. where redirects are sent)
    $mainHost = strtolower($httpHosts[0]);
    
    // Remove dirty windows characters
    $routesString = trim(str_replace("\r", '', $routesString));
    if(strlen($routesString) === 0) {
      // Unconfigured module, exit early
      return [];
    }

    // We add the mainhost as the first item so it can be used for early exit in the router
    $routes = [$mainHost];
    
    // Split lines
    $routesTemp = explode("\n", $routesString);

    foreach($routesTemp as $routeLine) {
      $routeLine = trim($routeLine);

      if(strlen($routeLine) === 0) {
        // Skip empty lines
        continue;
      }
      
      // Fields are separated with spaces
      $routeParts = explode(' ', $routeLine);
      if(count($routeParts) < 2) {
        // Discard incomplete routes silently
        continue;
      }
      
      if($routeParts[1]{0} !== '/') {
        // Discard paths not starting with a forward slash
        continue;
      }
      
      if(strpos($routeParts[0], '/') !== false) {
        // Discard request_hosts that contain a path
        continue;
      }
      
      if(substr($routeParts[1], -1) !== '/') {
        // Always append a trailing forward slash to the target path
        $routeParts[1].= '/';
      }
      
      // Finally construct the URL
      $targetUrl = '//' . $mainHost . '/' . ltrim($this->config->urls->root . $routeParts[1], '/');
      $appendFlag = !empty($routeParts[2]);
      
      // Use strtolower to avoid case problems
      $routes[strtolower($routeParts[0])] = [$targetUrl, $appendFlag];
    }
    
    return $routes;
  }
  
  /*
   *
   *
   * Module config fields
   *
   *
   */
	static public function getModuleConfigInputfields(array $data) {
    $routes = isset($data['routes']) ? $data['routes'] : '';

		$fields = new InputfieldWrapper();

		$field = wire('modules')->get("InputfieldTextarea");
		$field->name = "routes";
		$field->label = "Redirect routes";
		$field->description = "Add each redirect route on it's own line. Syntax: **<request_host> <target_path> [<append>]**";
    $field->description.= "\n\nExample 1: **catcampaign.com /cats x** would redirect **http://catcampaign.com/lions** to **http://www.mysite.com/cats/lions**.";
    $field->description.= "\nExample 2: **mysite.com /** would redirect **http://mysite.com/foobar** to **http://www.mysite.com/**.";
		$field->notes = "IMPORTANT: httpHosts must be defined in the config. Start all paths with '/'. Do not include a path in request_host. If you wish to append the request path, place an 'x' as the last field. Even if PW is running under a directory other than the root, do not include it, it will be added as necessary. Trailing forward slash will be added automatically to all target_paths.";
		$field->attr('value', $routes);
		$fields->add($field);

		return $fields;
	}
}
